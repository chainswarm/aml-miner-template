# UV Package Manager Support
# UV is a fast Python package installer and resolver, 10-100x faster than pip
# Installation: curl -LsSf https://astral.sh/uv/install.sh | sh
# Usage:
#   - Install dependencies: uv sync
#   - Install with dev dependencies: uv sync --extra dev
#   - Generate lock file: uv lock
#   - Install package: uv pip install -e .
#
# UV automatically reads this pyproject.toml and is fully compatible
# with the existing pip-based workflow

[build-system]
requires = ["setuptools>=68.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "alert-scoring"
version = "1.0.0"
description = "Alert Scoring - A flexible machine learning framework for alert scoring and ranking across compliance and risk domains"
readme = "README.md"
requires-python = ">=3.10"
license = {text = "MIT"}
authors = [
    {name = "AML Miner Team"}
]
keywords = ["alert-scoring", "machine-learning", "compliance", "risk-detection", "ranking"]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
]

dependencies = [
    "fastapi>=0.109.0",
    "uvicorn[standard]>=0.27.0",
    "pydantic>=2.5.0",
    "pydantic-settings>=2.1.0",
    "pandas>=2.2.0",
    "numpy>=1.26.0",
    "scikit-learn>=1.4.0",
    "lightgbm>=4.3.0",
    "shap>=0.44.0",
    "loguru>=0.7.2",
    "httpx>=0.26.0",
    "pyarrow>=15.0.0",
    "pyyaml>=6.0.1",
    "python-dotenv>=1.0.0",
    "clickhouse-connect>=0.7.0",
]

[project.optional-dependencies]
dev = [
    "pytest>=7.4.0",
    "pytest-cov>=4.1.0",
    "pytest-asyncio>=0.21.0",
    "black>=23.12.0",
    "ruff>=0.1.9",
    "mypy>=1.8.0",
    "isort>=5.13.0",
]

[project.scripts]
alert-scoring-serve = "alert_scoring.api.server:main"
alert-scoring-train = "alert_scoring.training.train_scorer:main"

[project.urls]
Homepage = "https://github.com/your-org/alert-scoring"
Documentation = "https://github.com/your-org/alert-scoring#readme"
Repository = "https://github.com/your-org/alert-scoring"

[tool.setuptools]
packages = [
    "alert_scoring",
    "alert_scoring.api",
    "alert_scoring.assessment",
    "alert_scoring.assessment.models",
    "alert_scoring.assessment.features",
    "alert_scoring.assessment.training",
    "alert_scoring.evaluation",
    "alert_scoring.evaluation.quality",
    "alert_scoring.evaluation.aggregation",
    "alert_scoring.evaluation.metrics",
    "alert_scoring.storage",
    "alert_scoring.storage.repositories",
    "alert_scoring.utils",
    "alert_scoring.config"
]

[tool.setuptools.package-data]
alert_scoring = ["config/*.yaml"]

[tool.black]
line-length = 100
target-version = ['py310']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

[tool.ruff]
line-length = 100
target-version = "py310"
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "C",  # flake8-comprehensions
    "B",  # flake8-bugbear
]
ignore = [
    "E501",  # line too long, handled by black
    "B008",  # do not perform function calls in argument defaults
    "C901",  # too complex
]

[tool.ruff.per-file-ignores]
"__init__.py" = ["F401"]

[tool.mypy]
python_version = "3.10"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = false
ignore_missing_imports = true

[tool.pytest.ini_options]
minversion = "7.0"
addopts = "-ra -q --strict-markers --cov=alert_scoring --cov-report=term-missing"
testpaths = ["tests"]
pythonpath = ["."]

[tool.coverage.run]
source = ["alert_scoring"]
omit = ["tests/*", "alert_scoring/__init__.py"]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "raise AssertionError",
    "raise NotImplementedError",
    "if __name__ == .__main__.:",
    "if TYPE_CHECKING:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]